{"version":3,"sources":["index.js"],"names":["tf","require","App","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","call","apply","concat","videoRef","React","createRef","canvasRef","state","model","runInference","video","current","canvas","ctx","getContext","navigator","mediaDevices","getUserMedia","then","stream","srcObject","play","processVideoFrame","catch","error","console","log","paused","ended","drawImage","width","height","_this$state$model$inp","inputs","shape","slice","_this$state$model$inp2","_slicedToArray","modelWidth","modelHeight","input","tidy","image","resizeBilinear","browser","fromPixels","div","expandDims","executeAsync","res","font","textBaseline","_res","boxes","scores","classes","valid_detections","boxesData","dataSync","scoresData","classesData","validDetectionsData","dispose","i","_boxesData$slice","_boxesData$slice2","x1","y1","x2","y2","score","toFixed","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","klass","textHeight","parseInt","fillRect","fillText","requestAnimationFrame","_createClass","key","value","_this2","loadGraphModel","setState","createElement","className","Fragment","ref","autoPlay","muted","id","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.bca66dce.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nconst tf = require('@tensorflow/tfjs');\n\nconst weights = '/web_model/model.json';\n\nconst names = ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light',\n               'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',\n               'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee',\n               'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard',\n               'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',\n               'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch',\n               'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',\n               'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear',\n               'hair drier', 'toothbrush']\n\nclass App extends React.Component {\n  videoRef = React.createRef();\n  canvasRef = React.createRef();\n\n  state = {\n    model: null\n  };\n\n  componentDidMount() {\n    tf.loadGraphModel(weights).then(model => {\n      this.setState({\n        model: model\n      });\n      this.runInference();\n    });\n  }\n\n  runInference = () => {\n    const video = this.videoRef.current;\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then(stream => {\n        video.srcObject = stream;\n        video.play();\n        this.processVideoFrame(video, canvas, ctx);\n      })\n      .catch(error => {\n        console.log(\"Error accessing camera: \", error);\n      });\n  };\n\n  processVideoFrame = (video, canvas, ctx) => {\n    if (!video.paused && !video.ended) {\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      const [modelWidth, modelHeight] = this.state.model.inputs[0].shape.slice(1, 3);\n      const input = tf.tidy(() => {\n        return tf.image.resizeBilinear(tf.browser.fromPixels(canvas), [modelWidth, modelHeight])\n          .div(255.0).expandDims(0);\n      });\n\n      this.state.model.executeAsync(input).then(res => {\n        // Font options.\n        const font = \"16px sans-serif\";\n        ctx.font = font;\n        ctx.textBaseline = \"top\";\n\n        const [boxes, scores, classes, valid_detections] = res;\n        const boxesData = boxes.dataSync();\n        const scoresData = scores.dataSync();\n        const classesData = classes.dataSync();\n        const validDetectionsData = valid_detections.dataSync()[0];\n\n        tf.dispose(res);\n\n        for (let i = 0; i < validDetectionsData; ++i) {\n          let [x1, y1, x2, y2] = boxesData.slice(i * 4, (i + 1) * 4);\n          x1 *= canvas.width;\n          x2 *= canvas.width;\n          y1 *= canvas.height;\n          y2 *= canvas.height;\n          const width = x2 - x1;\n          const height = y2 - y1;\n          const klass = \"pothole\";\n          const score = scoresData[i].toFixed(2);\n        \n          if (score <= 0.3 || classesData[i] !== 3) {\n              continue;\n          }\n\n          // Draw the bounding box.\n          ctx.strokeStyle = \"#00FFFF\";\n          ctx.lineWidth = 4;\n          ctx.strokeRect(x1, y1, width, height);\n\n          // Draw the label background.\n          ctx.fillStyle = \"#00FFFF\";\n          const textWidth = ctx.measureText(klass + \":\" + score).width;\n          const textHeight = parseInt(font, 10); // base 10\n          ctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\n\n          // Draw the text last to ensure it's on top.\n          ctx.fillStyle = \"#000000\";\n          ctx.fillText(klass + \":\" + score, x1, y1);\n        }\n\n        requestAnimationFrame(() => this.processVideoFrame(video, canvas, ctx));\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"Dropzone-page\">\n        {this.state.model ? (\n          <React.Fragment>\n            <video\n              ref={this.videoRef}\n              className=\"Dropzone-video\"\n              autoPlay\n              muted\n            />\n            <canvas\n              ref={this.canvasRef}\n              id=\"canvas\"\n              width=\"640\"\n              height=\"480\"\n              className=\"Dropzone-canvas\"\n            />\n          </React.Fragment>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}